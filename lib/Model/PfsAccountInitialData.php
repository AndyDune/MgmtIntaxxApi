<?php
/**
 * PfsAccountInitialData
 *
 * PHP version 5
 *
 * @category Class
 * @package  AndyDune\MgmtIntaxxApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api mgmt.intaxx
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AndyDune\MgmtIntaxxApi\Model;

use \ArrayAccess;
use \AndyDune\MgmtIntaxxApi\ObjectSerializer;

/**
 * PfsAccountInitialData Class Doc Comment
 *
 * @category Class
 * @package  AndyDune\MgmtIntaxxApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PfsAccountInitialData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PfsAccount_initialData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'firstName' => 'string',
'lastName' => 'string',
'address1' => 'string',
'city' => 'string',
'zipCode' => 'string',
'countryCode' => 'string',
'dateOfBirth' => 'string',
'mobileNo' => 'string',
'email' => 'string',
'embossName' => 'string',
'userDefined2' => 'string',
'cardStyle' => 'string',
'bin' => 'string',
'distributorCode' => 'string',
'userdefined' => '\AndyDune\MgmtIntaxxApi\Model\PfsAccountInitialDataUserdefined'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'firstName' => null,
'lastName' => null,
'address1' => null,
'city' => null,
'zipCode' => null,
'countryCode' => null,
'dateOfBirth' => null,
'mobileNo' => null,
'email' => null,
'embossName' => null,
'userDefined2' => null,
'cardStyle' => null,
'bin' => null,
'distributorCode' => null,
'userdefined' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'firstName' => 'firstName',
'lastName' => 'lastName',
'address1' => 'address1',
'city' => 'city',
'zipCode' => 'zipCode',
'countryCode' => 'countryCode',
'dateOfBirth' => 'dateOfBirth',
'mobileNo' => 'mobileNo',
'email' => 'email',
'embossName' => 'embossName',
'userDefined2' => 'userDefined2',
'cardStyle' => 'cardStyle',
'bin' => 'bin',
'distributorCode' => 'distributorCode',
'userdefined' => 'userdefined'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'firstName' => 'setFirstName',
'lastName' => 'setLastName',
'address1' => 'setAddress1',
'city' => 'setCity',
'zipCode' => 'setZipCode',
'countryCode' => 'setCountryCode',
'dateOfBirth' => 'setDateOfBirth',
'mobileNo' => 'setMobileNo',
'email' => 'setEmail',
'embossName' => 'setEmbossName',
'userDefined2' => 'setUserDefined2',
'cardStyle' => 'setCardStyle',
'bin' => 'setBin',
'distributorCode' => 'setDistributorCode',
'userdefined' => 'setUserdefined'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'firstName' => 'getFirstName',
'lastName' => 'getLastName',
'address1' => 'getAddress1',
'city' => 'getCity',
'zipCode' => 'getZipCode',
'countryCode' => 'getCountryCode',
'dateOfBirth' => 'getDateOfBirth',
'mobileNo' => 'getMobileNo',
'email' => 'getEmail',
'embossName' => 'getEmbossName',
'userDefined2' => 'getUserDefined2',
'cardStyle' => 'getCardStyle',
'bin' => 'getBin',
'distributorCode' => 'getDistributorCode',
'userdefined' => 'getUserdefined'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['zipCode'] = isset($data['zipCode']) ? $data['zipCode'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['dateOfBirth'] = isset($data['dateOfBirth']) ? $data['dateOfBirth'] : null;
        $this->container['mobileNo'] = isset($data['mobileNo']) ? $data['mobileNo'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['embossName'] = isset($data['embossName']) ? $data['embossName'] : null;
        $this->container['userDefined2'] = isset($data['userDefined2']) ? $data['userDefined2'] : null;
        $this->container['cardStyle'] = isset($data['cardStyle']) ? $data['cardStyle'] : null;
        $this->container['bin'] = isset($data['bin']) ? $data['bin'] : null;
        $this->container['distributorCode'] = isset($data['distributorCode']) ? $data['distributorCode'] : null;
        $this->container['userdefined'] = isset($data['userdefined']) ? $data['userdefined'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName firstName
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName lastName
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 address1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zipCode
     *
     * @return string
     */
    public function getZipCode()
    {
        return $this->container['zipCode'];
    }

    /**
     * Sets zipCode
     *
     * @param string $zipCode zipCode
     *
     * @return $this
     */
    public function setZipCode($zipCode)
    {
        $this->container['zipCode'] = $zipCode;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode countryCode
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param string $dateOfBirth dateOfBirth
     *
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets mobileNo
     *
     * @return string
     */
    public function getMobileNo()
    {
        return $this->container['mobileNo'];
    }

    /**
     * Sets mobileNo
     *
     * @param string $mobileNo mobileNo
     *
     * @return $this
     */
    public function setMobileNo($mobileNo)
    {
        $this->container['mobileNo'] = $mobileNo;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets embossName
     *
     * @return string
     */
    public function getEmbossName()
    {
        return $this->container['embossName'];
    }

    /**
     * Sets embossName
     *
     * @param string $embossName embossName
     *
     * @return $this
     */
    public function setEmbossName($embossName)
    {
        $this->container['embossName'] = $embossName;

        return $this;
    }

    /**
     * Gets userDefined2
     *
     * @return string
     */
    public function getUserDefined2()
    {
        return $this->container['userDefined2'];
    }

    /**
     * Sets userDefined2
     *
     * @param string $userDefined2 userDefined2
     *
     * @return $this
     */
    public function setUserDefined2($userDefined2)
    {
        $this->container['userDefined2'] = $userDefined2;

        return $this;
    }

    /**
     * Gets cardStyle
     *
     * @return string
     */
    public function getCardStyle()
    {
        return $this->container['cardStyle'];
    }

    /**
     * Sets cardStyle
     *
     * @param string $cardStyle cardStyle
     *
     * @return $this
     */
    public function setCardStyle($cardStyle)
    {
        $this->container['cardStyle'] = $cardStyle;

        return $this;
    }

    /**
     * Gets bin
     *
     * @return string
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     *
     * @param string $bin bin
     *
     * @return $this
     */
    public function setBin($bin)
    {
        $this->container['bin'] = $bin;

        return $this;
    }

    /**
     * Gets distributorCode
     *
     * @return string
     */
    public function getDistributorCode()
    {
        return $this->container['distributorCode'];
    }

    /**
     * Sets distributorCode
     *
     * @param string $distributorCode distributorCode
     *
     * @return $this
     */
    public function setDistributorCode($distributorCode)
    {
        $this->container['distributorCode'] = $distributorCode;

        return $this;
    }

    /**
     * Gets userdefined
     *
     * @return \AndyDune\MgmtIntaxxApi\Model\PfsAccountInitialDataUserdefined
     */
    public function getUserdefined()
    {
        return $this->container['userdefined'];
    }

    /**
     * Sets userdefined
     *
     * @param \AndyDune\MgmtIntaxxApi\Model\PfsAccountInitialDataUserdefined $userdefined userdefined
     *
     * @return $this
     */
    public function setUserdefined($userdefined)
    {
        $this->container['userdefined'] = $userdefined;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
