<?php
/**
 * OrderDataResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  AndyDune\MgmtIntaxxApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Api mgmt.intaxx
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.10.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AndyDune\MgmtIntaxxApi\Model;

use \ArrayAccess;
use \AndyDune\MgmtIntaxxApi\ObjectSerializer;

/**
 * OrderDataResponse Class Doc Comment
 *
 * @category Class
 * @description Order full data
 * @package  AndyDune\MgmtIntaxxApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderDataResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderDataResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'success' => 'bool',
'message' => 'string',
'datetimeCreate' => 'string',
'datetimeUpdate' => 'string',
'datetimeImport' => 'string',
'source' => 'string',
'status' => 'string',
'data' => '\AndyDune\MgmtIntaxxApi\Model\Order',
'kmc' => '\AndyDune\MgmtIntaxxApi\Model\KmcData',
'marks' => '\AndyDune\MgmtIntaxxApi\Model\OrderMarks'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'success' => null,
'message' => null,
'datetimeCreate' => null,
'datetimeUpdate' => null,
'datetimeImport' => null,
'source' => null,
'status' => null,
'data' => null,
'kmc' => null,
'marks' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
'message' => 'message',
'datetimeCreate' => 'datetime_create',
'datetimeUpdate' => 'datetime_update',
'datetimeImport' => 'datetime_import',
'source' => 'source',
'status' => 'status',
'data' => 'data',
'kmc' => 'kmc',
'marks' => 'marks'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
'message' => 'setMessage',
'datetimeCreate' => 'setDatetimeCreate',
'datetimeUpdate' => 'setDatetimeUpdate',
'datetimeImport' => 'setDatetimeImport',
'source' => 'setSource',
'status' => 'setStatus',
'data' => 'setData',
'kmc' => 'setKmc',
'marks' => 'setMarks'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
'message' => 'getMessage',
'datetimeCreate' => 'getDatetimeCreate',
'datetimeUpdate' => 'getDatetimeUpdate',
'datetimeImport' => 'getDatetimeImport',
'source' => 'getSource',
'status' => 'getStatus',
'data' => 'getData',
'kmc' => 'getKmc',
'marks' => 'getMarks'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['datetimeCreate'] = isset($data['datetimeCreate']) ? $data['datetimeCreate'] : null;
        $this->container['datetimeUpdate'] = isset($data['datetimeUpdate']) ? $data['datetimeUpdate'] : null;
        $this->container['datetimeImport'] = isset($data['datetimeImport']) ? $data['datetimeImport'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['kmc'] = isset($data['kmc']) ? $data['kmc'] : null;
        $this->container['marks'] = isset($data['marks']) ? $data['marks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['success'] === null) {
            $invalidProperties[] = "'success' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets datetimeCreate
     *
     * @return string
     */
    public function getDatetimeCreate()
    {
        return $this->container['datetimeCreate'];
    }

    /**
     * Sets datetimeCreate
     *
     * @param string $datetimeCreate datetimeCreate
     *
     * @return $this
     */
    public function setDatetimeCreate($datetimeCreate)
    {
        $this->container['datetimeCreate'] = $datetimeCreate;

        return $this;
    }

    /**
     * Gets datetimeUpdate
     *
     * @return string
     */
    public function getDatetimeUpdate()
    {
        return $this->container['datetimeUpdate'];
    }

    /**
     * Sets datetimeUpdate
     *
     * @param string $datetimeUpdate datetimeUpdate
     *
     * @return $this
     */
    public function setDatetimeUpdate($datetimeUpdate)
    {
        $this->container['datetimeUpdate'] = $datetimeUpdate;

        return $this;
    }

    /**
     * Gets datetimeImport
     *
     * @return string
     */
    public function getDatetimeImport()
    {
        return $this->container['datetimeImport'];
    }

    /**
     * Sets datetimeImport
     *
     * @param string $datetimeImport datetimeImport
     *
     * @return $this
     */
    public function setDatetimeImport($datetimeImport)
    {
        $this->container['datetimeImport'] = $datetimeImport;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets data
     *
     * @return \AndyDune\MgmtIntaxxApi\Model\Order
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \AndyDune\MgmtIntaxxApi\Model\Order $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets kmc
     *
     * @return \AndyDune\MgmtIntaxxApi\Model\KmcData
     */
    public function getKmc()
    {
        return $this->container['kmc'];
    }

    /**
     * Sets kmc
     *
     * @param \AndyDune\MgmtIntaxxApi\Model\KmcData $kmc kmc
     *
     * @return $this
     */
    public function setKmc($kmc)
    {
        $this->container['kmc'] = $kmc;

        return $this;
    }

    /**
     * Gets marks
     *
     * @return \AndyDune\MgmtIntaxxApi\Model\OrderMarks
     */
    public function getMarks()
    {
        return $this->container['marks'];
    }

    /**
     * Sets marks
     *
     * @param \AndyDune\MgmtIntaxxApi\Model\OrderMarks $marks marks
     *
     * @return $this
     */
    public function setMarks($marks)
    {
        $this->container['marks'] = $marks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
